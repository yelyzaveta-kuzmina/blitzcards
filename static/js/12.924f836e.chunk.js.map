{"version":3,"sources":["modules/game-settings-window/side-menu/styles.module.scss","modules/game-settings-window/caret-options-wrapper/styles.module.scss","modules/game-settings-window/caret/styles.module.scss","modules/settings-window/components/color-picker-block/styles.module.scss","modules/settings-window/styles.module.scss","modules/game-settings-window/styles.module.scss","modules/game-settings-window/state.js","modules/game-settings-window/side-menu/index.js","modules/game-settings-window/caret-options-wrapper/index.js","modules/game-settings-window/caret/index.js","modules/settings-window/components/color-picker-block/index.js","modules/settings-window/color-configuration-view.js","modules/settings-window/layout.js","modules/settings-window/state.js","modules/game-settings-window/index.js"],"names":["module","exports","KeyboardKey","useSettingsSideMenu","menuOptions","useState","selectedSettingIndex","setSelectedSettingIndex","useEffect","handleKeyDown","event","key","index","length","window","addEventListener","removeEventListener","SideMenu","item","selectedItem","onClick","className","label","classNames","styles","sideTab","sideTabActive","CaretOptionsWrapper","options","submittedCaret","onCaretSubmit","caretsWrapper","map","option","isSubmitted","submitted","caret","CaretSetting","useAppState","caretIndex","setSubmittedCaret","settingDetail","caretOptions","ColorPickerBlock","propertyName","style","colorPicker","ClassName","colorPreview","ColorConfigurationView","backgroundColor","textColor","displayColor","setBackgroundColor","setTextColor","setDisplayColor","activeSetting","setActiveSetting","onOutsideClick","width","color","onChange","hex","LayoutSetting","useTheming","onActiveSettingChange","useCallback","setting","useLayoutSetting","settingsWindow","left","backgroundColorPreview","displayColorPreview","textColorPreview","right","GameSettingsWindow","currentSetting","settingsWrapper","sideMenuWrapper"],"mappings":"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","file":"static/js/12.924f836e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideTab\":\"styles_sideTab__3CGmd\",\"sideTabActive\":\"styles_sideTabActive__28RKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caretsWrapper\":\"styles_caretsWrapper__3inyB\",\"caret\":\"styles_caret__1Uotw\",\"submitted\":\"styles_submitted__ZUuPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingDetail\":\"styles_settingDetail__1Q82d\",\"button\":\"styles_button__1KEBb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorPicker\":\"styles_colorPicker__lDsbT\",\"propertyName\":\"styles_propertyName__2JKod\",\"colorPreview\":\"styles_colorPreview__1qHDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWindow\":\"styles_settingsWindow__38ObN\",\"left\":\"styles_left__2uQNb\",\"backgroundColorPreview\":\"styles_backgroundColorPreview__oVH4d\",\"displayColorPreview\":\"styles_displayColorPreview__2iRJb\",\"textColorPreview\":\"styles_textColorPreview__3xCVe\",\"right\":\"styles_right__29RxO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"styles_settingsWrapper__2K-UL\",\"toPreviousPageButton\":\"styles_toPreviousPageButton__2Xn8r\",\"sideMenuWrapper\":\"styles_sideMenuWrapper__2QyWv\"};","import { useEffect, useState } from 'react';\n\nconst KeyboardKey = {\n  ARROW_UP: 'ArrowUp',\n  ARROW_DOWN: 'ArrowDown'\n};\n\nexport const useSettingsSideMenu = ({ menuOptions }) => {\n  const [selectedSettingIndex, setSelectedSettingIndex] = useState(0);\n\n  useEffect(() => {\n    const openPreviousSettingPage = () =>\n      setSelectedSettingIndex((index) => (index - 1 + menuOptions.length) % menuOptions.length);\n    const openNextSettingPage = () =>\n      setSelectedSettingIndex((index) => (index + 1) % menuOptions.length);\n\n    const handleKeyDown = (event) => {\n      if (event.key === KeyboardKey.ARROW_UP) {\n        openPreviousSettingPage();\n      }\n      if (event.key === KeyboardKey.ARROW_DOWN) {\n        openNextSettingPage();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return { selectedSettingIndex, setSelectedSettingIndex };\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\nconst SideMenu = ({ item, selectedItem, onClick }) => {\n  return (\n    <div\n      className={\n        item.label === selectedItem\n          ? classNames(styles.sideTab, styles.sideTabActive)\n          : styles.sideTab\n      }\n      onClick={onClick}>\n      {item.label}\n    </div>\n  );\n};\nexport default SideMenu;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\nconst CaretOptionsWrapper = ({ options, submittedCaret, onCaretSubmit }) => {\n  return (\n    <div className={styles.caretsWrapper}>\n      {options.map((option, index) => {\n        const isSubmitted = submittedCaret === option;\n\n        return (\n          <span\n            key={index}\n            className={isSubmitted ? classNames(styles.submitted, styles.caret) : styles.caret}\n            onClick={() => onCaretSubmit(options[index])}>\n            {option}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CaretOptionsWrapper;\n","import React from 'react';\nimport { useAppState } from '../../../state';\nimport { caretOptions } from '../../../utils/carets';\nimport CaretOptionsWrapper from '../caret-options-wrapper';\nimport styles from './styles.module.scss';\n\nconst CaretSetting = () => {\n  const { caretIndex, setSubmittedCaret, submittedCaret } = useAppState();\n\n  const onCaretSubmit = (caret) => {\n    setSubmittedCaret(caret);\n  };\n\n  return (\n    <>\n      <div className={styles.settingDetail}>\n        <CaretOptionsWrapper\n          options={caretOptions}\n          caretIndex={caretIndex}\n          submittedCaret={submittedCaret}\n          onCaretSubmit={onCaretSubmit}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default CaretSetting;\n","import React from 'react';\nimport ClassName from 'classnames';\nimport styles from './styles.module.scss';\n\nconst ColorPickerBlock = ({ className, propertyName, style, onClick }) => {\n  return (\n    <div className={styles.colorPicker}>\n      <span className={styles.propertyName}>{propertyName}:</span>\n      <div className={ClassName(styles.colorPreview, className)} style={style} onClick={onClick} />\n    </div>\n  );\n};\n\nexport default ColorPickerBlock;\n","import React from 'react';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport { SketchPicker } from 'react-color';\n\nconst ColorConfigurationView = ({\n  backgroundColor,\n  textColor,\n  displayColor,\n  setBackgroundColor,\n  setTextColor,\n  setDisplayColor,\n  activeSetting,\n  setActiveSetting\n}) => {\n  return (\n    <OutsideClickHandler onOutsideClick={() => setActiveSetting(null)}>\n      {activeSetting === 'background-color' && (\n        <SketchPicker\n          width={'20em'}\n          color={backgroundColor}\n          onChange={({ hex }) => setBackgroundColor(hex)}\n        />\n      )}\n      {activeSetting === 'text-color' && (\n        <SketchPicker width={'20em'} color={textColor} onChange={({ hex }) => setTextColor(hex)} />\n      )}\n      {activeSetting === 'display-color' && (\n        <SketchPicker\n          width={'20em'}\n          color={displayColor}\n          onChange={({ hex }) => setDisplayColor(hex)}\n        />\n      )}\n    </OutsideClickHandler>\n  );\n};\n\nexport default ColorConfigurationView;\n","import React from 'react';\nimport { useLayoutSetting } from './state';\nimport ColorPickerBlock from './components/color-picker-block';\nimport ColorConfigurationView from './color-configuration-view';\nimport styles from './styles.module.scss';\n\nconst LayoutSetting = () => {\n  const {\n    backgroundColor,\n    textColor,\n    displayColor,\n    activeSetting,\n    setActiveSetting,\n    setBackgroundColor,\n    setTextColor,\n    setDisplayColor,\n    onActiveSettingChange\n  } = useLayoutSetting();\n\n  return (\n    <div className={styles.settingsWindow}>\n      <div className={styles.left}>\n        <ColorPickerBlock\n          className={styles.backgroundColorPreview}\n          propertyName={'Background color'}\n          style={{ backgroundColor: backgroundColor }}\n          onClick={() => onActiveSettingChange('background-color')}\n        />\n        <ColorPickerBlock\n          className={styles.displayColorPreview}\n          propertyName={'Display color'}\n          style={{ backgroundColor: displayColor }}\n          onClick={() => onActiveSettingChange('display-color')}\n        />\n        <ColorPickerBlock\n          className={styles.textColorPreview}\n          propertyName={'Text color'}\n          style={{ backgroundColor: textColor }}\n          onClick={() => onActiveSettingChange('text-color')}\n        />\n      </div>\n      <div className={styles.right}>\n        <ColorConfigurationView\n          backgroundColor={backgroundColor}\n          textColor={textColor}\n          displayColor={displayColor}\n          activeSetting={activeSetting}\n          setActiveSetting={setActiveSetting}\n          setBackgroundColor={setBackgroundColor}\n          setTextColor={setTextColor}\n          setDisplayColor={setDisplayColor}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default LayoutSetting;\n","import { useState, useCallback } from 'react';\nimport { useTheming } from '../../state/theming';\n\nexport const useLayoutSetting = () => {\n  const [activeSetting, setActiveSetting] = useState(null);\n  const {\n    backgroundColor,\n    textColor,\n    displayColor,\n    setBackgroundColor,\n    setTextColor,\n    setDisplayColor\n  } = useTheming();\n\n  const onActiveSettingChange = useCallback(\n    (setting) => {\n      if (setting === activeSetting) {\n        setActiveSetting(null);\n        return;\n      }\n      setActiveSetting(setting);\n    },\n    [activeSetting]\n  );\n\n  return {\n    activeSetting,\n    backgroundColor,\n    textColor,\n    displayColor,\n    setActiveSetting,\n    setBackgroundColor,\n    setTextColor,\n    setDisplayColor,\n    onActiveSettingChange\n  };\n};\n","import React from 'react';\nimport { useSettingsSideMenu } from './state';\nimport SideMenu from './side-menu';\nimport CaretSetting from './caret';\nimport SettingsWindow from '../settings-window/layout';\nimport styles from './styles.module.scss';\n\nconst menuOptions = [\n  {\n    label: 'Caret'\n  },\n  {\n    label: 'Theme/layout'\n  }\n];\n\nconst GameSettingsWindow = () => {\n  const { selectedSettingIndex, setSelectedSettingIndex } = useSettingsSideMenu({ menuOptions });\n  const currentSetting = menuOptions[selectedSettingIndex].label;\n\n  return (\n    <div className={styles.settingsWrapper}>\n      <div className={styles.sideMenuWrapper}>\n        {menuOptions.map((item, index) => (\n          <SideMenu\n            item={item}\n            selectedItem={currentSetting}\n            key={index}\n            onClick={() => setSelectedSettingIndex(index)}\n          />\n        ))}\n      </div>\n      {currentSetting === 'Caret' && <CaretSetting />}\n      {currentSetting === 'Theme/layout' && <SettingsWindow />}\n    </div>\n  );\n};\n\nexport default GameSettingsWindow;\n"],"sourceRoot":""}