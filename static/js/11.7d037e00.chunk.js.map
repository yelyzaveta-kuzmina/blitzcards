{"version":3,"sources":["modules/timer/styles.module.scss","modules/game/playing-card/styles.module.scss","modules/game/styles.module.scss","components/translation-input/styles.module.scss","modules/timer/index.js","utils/formatting.js","modules/game/playing-card/index.js","components/to-next-step-button/index.js","components/translation-input/index.js","modules/game/index.js","modules/game/state.js"],"names":["module","exports","Timer","useState","seconds","setSeconds","useEffect","interval","setInterval","clearInterval","className","styles","timer","time","minutes","Math","floor","String","padStart","formatTime","PlayingCard","children","playingCard","ToNextStepButton","onClick","icon","faArrowAltCircleRight","KeyCodes","onFocusNextInput","element","inputs","Array","from","parentElement","querySelectorAll","currentInputIndex","findIndex","input","nextInput","focus","onFocusPreviousInput","previousInput","moveCaretToInput","caret","getBoundingClientRect","x","caretX","width","style","transform","TranslationInput","word","onChange","wordMask","setMask","value","setValue","caretRef","useRef","mask","translation","replace","firstInput","current","nextSibling","updateValueAtIndex","char","index","slice","clearValueAtIndex","useLayoutEffect","document","querySelector","wrapper","ref","symbol","inputValue","readOnly","key","cell","autoFocus","onFocus","event","target","onKeyPress","fromCharCode","charCode","console","log","onKeyUp","inputElement","keyCode","which","inputIndex","NewGame","setInputValue","languages","useLanguages","categories","useCategories","words","useWords","useRouteMatch","params","sourceLanguage","targetLanguage","categoryName","category","selectedLanguage","find","language","selectedCategory","name","languageId","id","filteredWords","filter","categoryId","isGameFinished","setIsGameFinished","currentWordIndex","setCurrentWordIndex","points","setPoints","next","useCallback","length","check","userWord","ifTrue","useGame","gameWindowWrapper","timerWrapper","resultsWrapper","playArea","wordToTranslate","handleNextStep","progress"],"mappings":"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","file":"static/js/11.7d037e00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"styles_timer__3TG5Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playingCard\":\"styles_playingCard__3qd2j\",\"gradientAnimation\":\"styles_gradientAnimation__3OdAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameWindowWrapper\":\"styles_gameWindowWrapper__1hfHl\",\"timerWrapper\":\"styles_timerWrapper__1BO37\",\"roll-in-left\":\"styles_roll-in-left__37m97\",\"resultsWrapper\":\"styles_resultsWrapper__TRtVO\",\"playArea\":\"styles_playArea__ys8M4\",\"wordToTranslate\":\"styles_wordToTranslate__b8dWA\",\"next\":\"styles_next__1ej57\",\"progress\":\"styles_progress__2XOEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__hb5gT\",\"caret\":\"styles_caret__2DURi\",\"blink\":\"styles_blink__1-Tfm\",\"cell\":\"styles_cell__23SWI\"};","import React, { useState, useEffect } from 'react';\nimport { formatTime } from '../../utils/formatting';\nimport styles from './styles.module.scss';\n\nconst Timer = () => {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((seconds) => seconds + 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  return <div className={styles.timer}>{formatTime(seconds)}</div>;\n};\n\nexport default Timer;\n","export const formatTime = (time) => {\n  const minutes = Math.floor(time / 60);\n  const seconds = Math.floor(time % 60);\n  return String(minutes).padStart(2, '0') + ':' + String(seconds).padStart(2, '0');\n};\n","import React from 'react';\nimport styles from './styles.module.scss';\n\nconst PlayingCard = ({ children, className }) => {\n  return (\n    <div className={styles.playingCard}>\n      <div className={className}>{children}</div>\n    </div>\n  );\n};\n\nexport default PlayingCard;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleRight } from '@fortawesome/free-regular-svg-icons';\n\nconst ToNextStepButton = ({ onClick, className }) => {\n  return <FontAwesomeIcon className={className} onClick={onClick} icon={faArrowAltCircleRight} />;\n};\n\nexport default ToNextStepButton;\n","import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport styles from './styles.module.scss';\n\nconst KeyCodes = {\n  BACKSPACE: 8,\n  DELETE: 46,\n  ARROW_RIGHT: 39,\n  ARROW_LEFT: 37\n};\n\nconst onFocusNextInput = (element) => {\n  const inputs = Array.from(element.parentElement.querySelectorAll('input'));\n  const currentInputIndex = inputs.findIndex((input) => input === element);\n  const nextInput = inputs[currentInputIndex + 1];\n  if (nextInput) {\n    nextInput.focus();\n  }\n};\n\nconst onFocusPreviousInput = (element) => {\n  const inputs = Array.from(element.parentElement.querySelectorAll('input'));\n  const currentInputIndex = inputs.findIndex((input) => input === element);\n  const previousInput = inputs[currentInputIndex - 1];\n  if (previousInput) {\n    previousInput.focus();\n  }\n};\n\nconst moveCaretToInput = (caret, element) => {\n  if (!caret || !element) {\n    return;\n  }\n  const { x, width } = element.getBoundingClientRect();\n  const { x: parentX } = element.parentElement.getBoundingClientRect();\n  const caretX = x - parentX + 2; // + width / 2;\n  caret.style.transform = `translateX(${caretX}px)`;\n};\n\nconst TranslationInput = ({ word, onChange }) => {\n  const [wordMask, setMask] = useState('');\n  const [value, setValue] = useState('');\n  const caretRef = useRef();\n\n  useEffect(() => {\n    const mask = word.translation.replace(/\\w/g, '*');\n    const firstInput = caretRef.current.nextSibling;\n    if (firstInput) {\n      firstInput.focus();\n    }\n    setMask(mask);\n    setValue(mask);\n  }, [word]);\n\n  const updateValueAtIndex = (char, index) =>\n    setValue((value) => value.slice(0, index) + char + value.slice(index + 1));\n\n  const clearValueAtIndex = (index) => updateValueAtIndex('*', index);\n\n  useLayoutEffect(() => {\n    moveCaretToInput(caretRef.current, document.querySelector('input:focus'));\n  }, []);\n\n  useEffect(() => {\n    onChange(value);\n  }, [value, onChange]);\n\n  const handleKey = (inputElement, keyCode, inputIndex) => {\n    if (keyCode === KeyCodes.BACKSPACE) {\n      if (value[inputIndex] === '*' && inputIndex > 0) {\n        clearValueAtIndex(inputIndex - 1);\n      }\n      clearValueAtIndex(inputIndex);\n      onFocusPreviousInput(inputElement);\n    }\n\n    if (keyCode === KeyCodes.ARROW_RIGHT) {\n      onFocusNextInput(inputElement);\n    }\n\n    if (keyCode === KeyCodes.ARROW_LEFT) {\n      onFocusPreviousInput(inputElement);\n    }\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <div ref={caretRef} className={styles.caret}>\n        ♥\n      </div>\n      {Array.from(wordMask, (symbol, index) => {\n        if (symbol === '*') {\n          const inputValue = value[index] === '*' ? '' : value[index];\n          return (\n            <input\n              readOnly\n              key={index}\n              className={styles.cell}\n              autoFocus={index === 0}\n              value={inputValue}\n              onFocus={(event) => {\n                moveCaretToInput(caretRef.current, event.target);\n              }}\n              onKeyPress={(event) => {\n                const char = String.fromCharCode(event.charCode);\n                console.log(char, index);\n                updateValueAtIndex(char, index);\n                onFocusNextInput(event.target);\n              }}\n              onKeyUp={(event) => handleKey(event.target, event.which, index)}\n            />\n          );\n        }\n\n        return (\n          <span key={index} className={styles.cell}>\n            {symbol}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TranslationInput;\n","import React, { useState } from 'react';\nimport { useGame } from './state';\nimport Timer from '../timer';\nimport PlayingCard from './playing-card';\nimport ToNextStepButton from '../../components/to-next-step-button';\nimport styles from './styles.module.scss';\nimport TranslationInput from '../../components/translation-input';\n\nconst NewGame = () => {\n  const [inputValue, setInputValue] = useState('');\n  const { filteredWords, currentWordIndex, word, isGameFinished, check, points } = useGame();\n\n  if (isGameFinished) {\n    return 'Game finished!';\n  }\n\n  const handleNextStep = (inputValue) => {\n    check(inputValue);\n    setInputValue('');\n  };\n\n  return (\n    <div className={styles.gameWindowWrapper}>\n      <div className={styles.timerWrapper}>\n        <Timer />\n      </div>\n      <div className={styles.resultsWrapper}>points: {points}</div>\n      <div className={styles.playArea}>\n        <PlayingCard className={styles.wordToTranslate}>{word.word}</PlayingCard>\n        <PlayingCard>\n          <TranslationInput word={word} onChange={setInputValue} />\n        </PlayingCard>\n      </div>\n      <ToNextStepButton className={styles.next} onClick={() => handleNextStep(inputValue)} />\n      <div className={styles.progress}>\n        {currentWordIndex + 1}/{filteredWords.length}\n      </div>\n    </div>\n  );\n};\n\nexport default NewGame;\n","import { useState, useCallback } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useLanguages } from '../../state/languages';\nimport { useCategories } from '../../state/categories';\nimport { useWords } from '../../state/words';\n\nexport const useGame = () => {\n  const { languages } = useLanguages();\n  const { categories } = useCategories();\n  const { words } = useWords();\n  const { sourceLanguage, targetLanguage, category: categoryName } = useRouteMatch().params;\n\n  const selectedLanguage = languages.find((language) => {\n    return language.sourceLanguage === sourceLanguage && language.targetLanguage === targetLanguage;\n  });\n\n  const selectedCategory = categories.find((category) => {\n    return category.name === categoryName && category.languageId === selectedLanguage.id;\n  });\n  const filteredWords = words.filter((word) => word.categoryId === selectedCategory.id);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [points, setPoints] = useState(0);\n\n  const word = filteredWords[currentWordIndex];\n\n  const next = useCallback(() => {\n    if (currentWordIndex < filteredWords.length - 1) {\n      setCurrentWordIndex(currentWordIndex + 1);\n      return;\n    }\n    setIsGameFinished(true);\n  }, [currentWordIndex, filteredWords]);\n\n  const check = useCallback(\n    (userWord) => {\n      console.log(userWord);\n      const ifTrue = userWord === word.translation;\n      console.log(ifTrue);\n      if (userWord === word.translation) {\n        setPoints((points) => points + 1);\n      }\n      next();\n    },\n    [word, next]\n  );\n  return { filteredWords, currentWordIndex, word, check, next, points, isGameFinished };\n};\n"],"sourceRoot":""}